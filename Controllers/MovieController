using Katalog.Models.Domain;
using Katalog.Repositories.Abstract;
using Katalog.Repositories.Implementation;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace Katalog.Controllers
{
    [Authorize]
    public class MovieController : Controller
    {
        
        private readonly IMovieService _movieService;
        private readonly IFileServices _fileService;
        private readonly IGenreService _genService;
        public MovieController(IGenreService genService, IMovieService MovieService, IFileServices fileService)
        {
            _movieService = MovieService;
            _fileService = fileService;
            _genService = genService;
        }
        public IActionResult Add() //Get method - връща празен movie object и списък с жанрове, от които да се избира
        {
            var model = new Movie();
            model.GenreList = _genService.List().Select(a => new SelectListItem { Text = a.GenreName, Value = a.Id.ToString() });
            return View(model);
        }

        [HttpPost]
        public IActionResult Add(Movie model) //POST method - добавя  нов филм
        {
            model.GenreList = _genService.List().Select(a => new SelectListItem { Text = a.GenreName, Value = a.Id.ToString() });
            if (!ModelState.IsValid)
                return View(model);
            if (model.ImageFile != null)
            {
                var fileReult = this._fileService.SaveImage(model.ImageFile); //Запазва се файла на снимката
                if (fileReult.Item1 == 0)
                {
                    TempData["msg"] = "File could not saved";
                    return View(model);
                }
                var imageName = fileReult.Item2;
                model.MovieImage = imageName;
            }
            var result = _movieService.Add(model); //Добавя се филма в базата данни, като се използва интърфейса IMovieService
            if (result)
            {
                TempData["msg"] = "Added Successfully";
                return RedirectToAction(nameof(Add));
            }
            else
            {
                TempData["msg"] = "Error on server side";
                return View(model);
            }
        }

        public IActionResult Edit(int id) //Get method - връща съществуващ movie object и списък с жанрове, от които да се избира
        {
            var model = _movieService.GetById(id);
            var selectGenres = _movieService.GetGenreByMovieId(model.Id);
            MultiSelectList multiGenreList = new MultiSelectList(_genService.List(), "Id", "GenreName", selectGenres);
            model.MultiGenreList= multiGenreList;
            return View(model);
        }

        [HttpPost] 
        public IActionResult Edit(Movie model) //POST method - запазва файла с изображението на филма с помощта на 
               //услугата "IFileServices", актуализира филма в базата данни с помощта на  услугата "IMovieService"
               //и връща съобщение за успех, ако филмът е актуализиран успешно.
        {
            var selectGenres = _movieService.GetGenreByMovieId(model.Id);
            MultiSelectList multiGenreList = new MultiSelectList(_genService.List(), "Id", "GenreName", selectGenres);
            model.MultiGenreList = multiGenreList;
            if (!ModelState.IsValid)
                return View(model);
            if (model.ImageFile != null)
            {
                var fileReult = this._fileService.SaveImage(model.ImageFile); //IFileServices
                if (fileReult.Item1 == 0)
                {
                    TempData["msg"] = "File could not saved";
                    return View(model);
                }
                var imageName = fileReult.Item2;
                model.MovieImage = imageName;
            }
            var result = _movieService.Update(model); //IMovieService
            if (result)
            {
                TempData["msg"] = "Added Successfully";
                return RedirectToAction(nameof(MovieList));
            }
            else
            {
                TempData["msg"] = "Error on server side";
                return View(model);
            }
        }

        public IActionResult MovieList() //Връща списък с всички филми
        {
            var data = this._movieService.List();
            return View(data);
        }

        public IActionResult Delete(int id) //Методът изтрива филм от базата данни и връща потребителя обратно в списъка с филми
        {
            var result = _movieService.Delete(id);
            return RedirectToAction(nameof(MovieList));
        }
    }
}
